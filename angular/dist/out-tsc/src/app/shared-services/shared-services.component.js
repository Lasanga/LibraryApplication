/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.0.0 (NJsonSchema v9.13.35.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import * as tslib_1 from "tslib";
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var API_BASE_URL = new InjectionToken('API_BASE_URL');
var AccountService = /** @class */ (function () {
    function AccountService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    AccountService.prototype.register = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processRegister(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processRegister(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AccountService.prototype.processRegister = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AccountService.prototype.getForiegners = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/GetForiegners";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetForiegners(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetForiegners(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AccountService.prototype.processGetForiegners = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(UnRegUserOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AccountService.prototype.addForiegner = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/AddForiegner";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processAddForiegner(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processAddForiegner(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AccountService.prototype.processAddForiegner = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AccountService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], AccountService);
    return AccountService;
}());
export { AccountService };
var AuthorService = /** @class */ (function () {
    function AuthorService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    AuthorService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Author/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AuthorService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(AuthorOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AuthorService.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Author/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AuthorService.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AuthorOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AuthorService.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Author/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AuthorService.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AuthorService.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Author/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AuthorService.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AuthorOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AuthorService.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Author/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    AuthorService.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    AuthorService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], AuthorService);
    return AuthorService;
}());
export { AuthorService };
var BooksService = /** @class */ (function () {
    function BooksService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    BooksService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(BookOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService.prototype.getRare = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/GetRare";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRare(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRare(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processGetRare = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(BookOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService.prototype.getBookById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/GetBookById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetBookById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetBookById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processGetBookById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BookOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService.prototype.createBook = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/CreateBook";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreateBook(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreateBook(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processCreateBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService.prototype.updateBook = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/UpdateBook";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdateBook(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdateBook(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processUpdateBook = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BookOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService.prototype.deleteBook = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Books/DeleteBook?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDeleteBook(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDeleteBook(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    BooksService.prototype.processDeleteBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    BooksService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], BooksService);
    return BooksService;
}());
export { BooksService };
var CategoryService = /** @class */ (function () {
    function CategoryService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    CategoryService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Category/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CategoryService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                        var item = resultData200_5[_i];
                        result200.push(CategoryOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CategoryService.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Category/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CategoryService.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CategoryOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CategoryService.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Category/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CategoryService.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CategoryService.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Category/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CategoryService.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CategoryOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CategoryService.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Category/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    CategoryService.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    CategoryService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], CategoryService);
    return CategoryService;
}());
export { CategoryService };
var GovernmentPublicationsService = /** @class */ (function () {
    function GovernmentPublicationsService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    GovernmentPublicationsService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                        var item = resultData200_6[_i];
                        result200.push(GovtPublicationOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService.prototype.getRare = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/GetRare";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRare(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRare(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processGetRare = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_7 = resultData200; _i < resultData200_7.length; _i++) {
                        var item = resultData200_7[_i];
                        result200.push(GovtPublicationOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GovtPublicationOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GovtPublicationOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/GovernmentPublications/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    GovernmentPublicationsService.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    GovernmentPublicationsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], GovernmentPublicationsService);
    return GovernmentPublicationsService;
}());
export { GovernmentPublicationsService };
var NewsPapersService = /** @class */ (function () {
    function NewsPapersService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    NewsPapersService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_8 = resultData200; _i < resultData200_8.length; _i++) {
                        var item = resultData200_8[_i];
                        result200.push(NewspaperOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService.prototype.getRare = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/GetRare";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRare(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRare(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processGetRare = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_9 = resultData200; _i < resultData200_9.length; _i++) {
                        var item = resultData200_9[_i];
                        result200.push(NewspaperOutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? NewspaperOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? NewspaperOutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/NewsPapers/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    NewsPapersService.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    NewsPapersService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], NewsPapersService);
    return NewsPapersService;
}());
export { NewsPapersService };
var OlaLeafsService = /** @class */ (function () {
    function OlaLeafsService(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }
    OlaLeafsService.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_10 = resultData200; _i < resultData200_10.length; _i++) {
                        var item = resultData200_10[_i];
                        result200.push(OlaleafoutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService.prototype.getRare = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/GetRare";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRare(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRare(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processGetRare = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_11 = resultData200; _i < resultData200_11.length; _i++) {
                        var item = resultData200_11[_i];
                        result200.push(OlaleafoutputDto.fromJS(item));
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? OlaleafoutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? OlaleafoutputDto.fromJS(resultData200) : null;
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/OlaLeafs/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    OlaLeafsService.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return _observableOf(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    OlaLeafsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(HttpClient)), tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(API_BASE_URL)),
        tslib_1.__metadata("design:paramtypes", [HttpClient, String])
    ], OlaLeafsService);
    return OlaLeafsService;
}());
export { OlaLeafsService };
var UserRegisterInputDto = /** @class */ (function () {
    function UserRegisterInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserRegisterInputDto.prototype.init = function (data) {
        if (data) {
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.nationalId = data["nationalId"];
        }
    };
    UserRegisterInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserRegisterInputDto();
        result.init(data);
        return result;
    };
    UserRegisterInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["nationalId"] = this.nationalId;
        return data;
    };
    UserRegisterInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserRegisterInputDto();
        result.init(json);
        return result;
    };
    return UserRegisterInputDto;
}());
export { UserRegisterInputDto };
var UnRegUserOutputDto = /** @class */ (function () {
    function UnRegUserOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UnRegUserOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.isActive = data["isActive"];
        }
    };
    UnRegUserOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UnRegUserOutputDto();
        result.init(data);
        return result;
    };
    UnRegUserOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["isActive"] = this.isActive;
        return data;
    };
    UnRegUserOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UnRegUserOutputDto();
        result.init(json);
        return result;
    };
    return UnRegUserOutputDto;
}());
export { UnRegUserOutputDto };
var AddForiegnerInputDto = /** @class */ (function () {
    function AddForiegnerInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AddForiegnerInputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    AddForiegnerInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AddForiegnerInputDto();
        result.init(data);
        return result;
    };
    AddForiegnerInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    AddForiegnerInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AddForiegnerInputDto();
        result.init(json);
        return result;
    };
    return AddForiegnerInputDto;
}());
export { AddForiegnerInputDto };
var AuthorOutputDto = /** @class */ (function () {
    function AuthorOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthorOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    };
    AuthorOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthorOutputDto();
        result.init(data);
        return result;
    };
    AuthorOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    AuthorOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthorOutputDto();
        result.init(json);
        return result;
    };
    return AuthorOutputDto;
}());
export { AuthorOutputDto };
var AuthorInputDto = /** @class */ (function () {
    function AuthorInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthorInputDto.prototype.init = function (data) {
        if (data) {
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    };
    AuthorInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthorInputDto();
        result.init(data);
        return result;
    };
    AuthorInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    AuthorInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthorInputDto();
        result.init(json);
        return result;
    };
    return AuthorInputDto;
}());
export { AuthorInputDto };
var AuthorUpdateDto = /** @class */ (function () {
    function AuthorUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthorUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    };
    AuthorUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthorUpdateDto();
        result.init(data);
        return result;
    };
    AuthorUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    AuthorUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthorUpdateDto();
        result.init(json);
        return result;
    };
    return AuthorUpdateDto;
}());
export { AuthorUpdateDto };
var BookOutputDto = /** @class */ (function () {
    function BookOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : undefined;
        }
    };
    BookOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookOutputDto();
        result.init(data);
        return result;
    };
    BookOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    BookOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookOutputDto();
        result.init(json);
        return result;
    };
    return BookOutputDto;
}());
export { BookOutputDto };
export var SourceType;
(function (SourceType) {
    SourceType[SourceType["Available"] = 10] = "Available";
    SourceType[SourceType["Rare"] = 20] = "Rare";
})(SourceType || (SourceType = {}));
var CategoryOutputDto = /** @class */ (function () {
    function CategoryOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CategoryOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    };
    CategoryOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CategoryOutputDto();
        result.init(data);
        return result;
    };
    CategoryOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    };
    CategoryOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CategoryOutputDto();
        result.init(json);
        return result;
    };
    return CategoryOutputDto;
}());
export { CategoryOutputDto };
var BookInputDto = /** @class */ (function () {
    function BookInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookInputDto.prototype.init = function (data) {
        if (data) {
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    };
    BookInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookInputDto();
        result.init(data);
        return result;
    };
    BookInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data;
    };
    BookInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookInputDto();
        result.init(json);
        return result;
    };
    return BookInputDto;
}());
export { BookInputDto };
var BookUpdateDto = /** @class */ (function () {
    function BookUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
        }
    };
    BookUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookUpdateDto();
        result.init(data);
        return result;
    };
    BookUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    BookUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookUpdateDto();
        result.init(json);
        return result;
    };
    return BookUpdateDto;
}());
export { BookUpdateDto };
var AuditedEntity = /** @class */ (function () {
    function AuditedEntity(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.isDeleted = false;
        }
    }
    AuditedEntity.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : false;
            this.deleterUserId = data["deleterUserId"];
            this.deletedTime = data["deletedTime"] ? new Date(data["deletedTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : undefined;
            this.lastModificationDate = data["lastModificationDate"] ? new Date(data["lastModificationDate"].toString()) : undefined;
            this.lastModifierUser = data["lastModifierUser"];
        }
    };
    AuditedEntity.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditedEntity' cannot be instantiated.");
    };
    AuditedEntity.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletedTime"] = this.deletedTime ? this.deletedTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["lastModificationDate"] = this.lastModificationDate ? this.lastModificationDate.toISOString() : undefined;
        data["lastModifierUser"] = this.lastModifierUser;
        return data;
    };
    AuditedEntity.prototype.clone = function () {
        throw new Error("The abstract class 'AuditedEntity' cannot be instantiated.");
    };
    return AuditedEntity;
}());
export { AuditedEntity };
var Author = /** @class */ (function (_super) {
    tslib_1.__extends(Author, _super);
    function Author(data) {
        return _super.call(this, data) || this;
    }
    Author.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
        if (data) {
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
            if (data["books"] && data["books"].constructor === Array) {
                this.books = [];
                for (var _i = 0, _a = data["books"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.books.push(Book.fromJS(item));
                }
            }
        }
    };
    Author.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Author();
        result.init(data);
        return result;
    };
    Author.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        if (this.books && this.books.constructor === Array) {
            data["books"] = [];
            for (var _i = 0, _a = this.books; _i < _a.length; _i++) {
                var item = _a[_i];
                data["books"].push(item.toJSON());
            }
        }
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    Author.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Author();
        result.init(json);
        return result;
    };
    return Author;
}(AuditedEntity));
export { Author };
var SourceEntity = /** @class */ (function (_super) {
    tslib_1.__extends(SourceEntity, _super);
    function SourceEntity(data) {
        var _this = _super.call(this, data) || this;
        if (!data) {
            _this.sourceType = SourceType.Available;
        }
        return _this;
    }
    SourceEntity.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
        if (data) {
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"] !== undefined ? data["sourceType"] : SourceType.Available;
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
        }
    };
    SourceEntity.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'SourceEntity' cannot be instantiated.");
    };
    SourceEntity.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    SourceEntity.prototype.clone = function () {
        throw new Error("The abstract class 'SourceEntity' cannot be instantiated.");
    };
    return SourceEntity;
}(AuditedEntity));
export { SourceEntity };
var Book = /** @class */ (function (_super) {
    tslib_1.__extends(Book, _super);
    function Book(data) {
        return _super.call(this, data) || this;
    }
    Book.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
        if (data) {
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
        }
    };
    Book.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Book();
        result.init(data);
        return result;
    };
    Book.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    Book.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Book();
        result.init(json);
        return result;
    };
    return Book;
}(SourceEntity));
export { Book };
var Category = /** @class */ (function (_super) {
    tslib_1.__extends(Category, _super);
    function Category(data) {
        return _super.call(this, data) || this;
    }
    Category.prototype.init = function (data) {
        _super.prototype.init.call(this, data);
        if (data) {
            this.displayName = data["displayName"];
            if (data["books"] && data["books"].constructor === Array) {
                this.books = [];
                for (var _i = 0, _a = data["books"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.books.push(Book.fromJS(item));
                }
            }
        }
    };
    Category.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Category();
        result.init(data);
        return result;
    };
    Category.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        if (this.books && this.books.constructor === Array) {
            data["books"] = [];
            for (var _i = 0, _a = this.books; _i < _a.length; _i++) {
                var item = _a[_i];
                data["books"].push(item.toJSON());
            }
        }
        _super.prototype.toJSON.call(this, data);
        return data;
    };
    Category.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Category();
        result.init(json);
        return result;
    };
    return Category;
}(AuditedEntity));
export { Category };
var CategoryInputDto = /** @class */ (function () {
    function CategoryInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CategoryInputDto.prototype.init = function (data) {
        if (data) {
            this.displayName = data["displayName"];
        }
    };
    CategoryInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CategoryInputDto();
        result.init(data);
        return result;
    };
    CategoryInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        return data;
    };
    CategoryInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CategoryInputDto();
        result.init(json);
        return result;
    };
    return CategoryInputDto;
}());
export { CategoryInputDto };
var CategoryUpdateDto = /** @class */ (function () {
    function CategoryUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CategoryUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    };
    CategoryUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CategoryUpdateDto();
        result.init(data);
        return result;
    };
    CategoryUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    };
    CategoryUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CategoryUpdateDto();
        result.init(json);
        return result;
    };
    return CategoryUpdateDto;
}());
export { CategoryUpdateDto };
var GovtPublicationOutputDto = /** @class */ (function () {
    function GovtPublicationOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GovtPublicationOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : undefined;
        }
    };
    GovtPublicationOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GovtPublicationOutputDto();
        result.init(data);
        return result;
    };
    GovtPublicationOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    GovtPublicationOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GovtPublicationOutputDto();
        result.init(json);
        return result;
    };
    return GovtPublicationOutputDto;
}());
export { GovtPublicationOutputDto };
var GovtPublicationInputDto = /** @class */ (function () {
    function GovtPublicationInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GovtPublicationInputDto.prototype.init = function (data) {
        if (data) {
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    };
    GovtPublicationInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GovtPublicationInputDto();
        result.init(data);
        return result;
    };
    GovtPublicationInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data;
    };
    GovtPublicationInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GovtPublicationInputDto();
        result.init(json);
        return result;
    };
    return GovtPublicationInputDto;
}());
export { GovtPublicationInputDto };
var GovtPublicationUpdateDto = /** @class */ (function () {
    function GovtPublicationUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GovtPublicationUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
        }
    };
    GovtPublicationUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GovtPublicationUpdateDto();
        result.init(data);
        return result;
    };
    GovtPublicationUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    GovtPublicationUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GovtPublicationUpdateDto();
        result.init(json);
        return result;
    };
    return GovtPublicationUpdateDto;
}());
export { GovtPublicationUpdateDto };
var NewspaperOutputDto = /** @class */ (function () {
    function NewspaperOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NewspaperOutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : undefined;
        }
    };
    NewspaperOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NewspaperOutputDto();
        result.init(data);
        return result;
    };
    NewspaperOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    NewspaperOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NewspaperOutputDto();
        result.init(json);
        return result;
    };
    return NewspaperOutputDto;
}());
export { NewspaperOutputDto };
var NewspaperInputDto = /** @class */ (function () {
    function NewspaperInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NewspaperInputDto.prototype.init = function (data) {
        if (data) {
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    };
    NewspaperInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NewspaperInputDto();
        result.init(data);
        return result;
    };
    NewspaperInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data;
    };
    NewspaperInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NewspaperInputDto();
        result.init(json);
        return result;
    };
    return NewspaperInputDto;
}());
export { NewspaperInputDto };
var NewspaperUpdateDto = /** @class */ (function () {
    function NewspaperUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NewspaperUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
        }
    };
    NewspaperUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NewspaperUpdateDto();
        result.init(data);
        return result;
    };
    NewspaperUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    NewspaperUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NewspaperUpdateDto();
        result.init(json);
        return result;
    };
    return NewspaperUpdateDto;
}());
export { NewspaperUpdateDto };
var OlaleafoutputDto = /** @class */ (function () {
    function OlaleafoutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OlaleafoutputDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : undefined;
        }
    };
    OlaleafoutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OlaleafoutputDto();
        result.init(data);
        return result;
    };
    OlaleafoutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    OlaleafoutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OlaleafoutputDto();
        result.init(json);
        return result;
    };
    return OlaleafoutputDto;
}());
export { OlaleafoutputDto };
var OlaLeafInputDto = /** @class */ (function () {
    function OlaLeafInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OlaLeafInputDto.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    };
    OlaLeafInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OlaLeafInputDto();
        result.init(data);
        return result;
    };
    OlaLeafInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data;
    };
    OlaLeafInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OlaLeafInputDto();
        result.init(json);
        return result;
    };
    return OlaLeafInputDto;
}());
export { OlaLeafInputDto };
var OlaleafUpdateDto = /** @class */ (function () {
    function OlaleafUpdateDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OlaleafUpdateDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : undefined;
        }
    };
    OlaleafUpdateDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OlaleafUpdateDto();
        result.init(data);
        return result;
    };
    OlaleafUpdateDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : undefined;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        return data;
    };
    OlaleafUpdateDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OlaleafUpdateDto();
        result.init(json);
        return result;
    };
    return OlaleafUpdateDto;
}());
export { OlaleafUpdateDto };
var SwaggerException = /** @class */ (function (_super) {
    tslib_1.__extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
export { SwaggerException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=shared-services.component.js.map