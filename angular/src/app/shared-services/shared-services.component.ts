/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.0.0 (NJsonSchema v9.13.35.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    register(input: UserRegisterInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getForiegners(): Observable<UnRegUserOutputDto[]> {
        let url_ = this.baseUrl + "/api/Account/GetForiegners";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForiegners(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForiegners(<any>response_);
                } catch (e) {
                    return <Observable<UnRegUserOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UnRegUserOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetForiegners(response: HttpResponseBase): Observable<UnRegUserOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UnRegUserOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UnRegUserOutputDto[]>(<any>null);
    }

    addForiegner(input: AddForiegnerInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/AddForiegner";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddForiegner(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddForiegner(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddForiegner(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class AuthorService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<AuthorOutputDto[]> {
        let url_ = this.baseUrl + "/api/Author/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<AuthorOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthorOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AuthorOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(AuthorOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthorOutputDto[]>(<any>null);
    }

    getById(id: number): Observable<AuthorOutputDto> {
        let url_ = this.baseUrl + "/api/Author/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<AuthorOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthorOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<AuthorOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthorOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthorOutputDto>(<any>null);
    }

    create(input: AuthorInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Author/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    update(input: AuthorUpdateDto): Observable<AuthorOutputDto> {
        let url_ = this.baseUrl + "/api/Author/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<AuthorOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthorOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<AuthorOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthorOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthorOutputDto>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Author/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class BooksService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<BookOutputDto[]> {
        let url_ = this.baseUrl + "/api/Books/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<BookOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<BookOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(BookOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookOutputDto[]>(<any>null);
    }

    getRare(): Observable<BookOutputDto[]> {
        let url_ = this.baseUrl + "/api/Books/GetRare";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRare(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRare(<any>response_);
                } catch (e) {
                    return <Observable<BookOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRare(response: HttpResponseBase): Observable<BookOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(BookOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookOutputDto[]>(<any>null);
    }

    getBookById(id: number): Observable<BookOutputDto> {
        let url_ = this.baseUrl + "/api/Books/GetBookById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookById(<any>response_);
                } catch (e) {
                    return <Observable<BookOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBookById(response: HttpResponseBase): Observable<BookOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? BookOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookOutputDto>(<any>null);
    }

    createBook(input: BookInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Books/CreateBook";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateBook(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateBook(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    updateBook(input: BookUpdateDto): Observable<BookOutputDto> {
        let url_ = this.baseUrl + "/api/Books/UpdateBook";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBook(<any>response_);
                } catch (e) {
                    return <Observable<BookOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BookOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBook(response: HttpResponseBase): Observable<BookOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? BookOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookOutputDto>(<any>null);
    }

    deleteBook(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Books/DeleteBook?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBook(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBook(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBook(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class CategoryService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<CategoryOutputDto[]> {
        let url_ = this.baseUrl + "/api/Category/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CategoryOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoryOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CategoryOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CategoryOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryOutputDto[]>(<any>null);
    }

    getById(id: number): Observable<CategoryOutputDto> {
        let url_ = this.baseUrl + "/api/Category/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<CategoryOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoryOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<CategoryOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CategoryOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryOutputDto>(<any>null);
    }

    create(input: CategoryInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/Category/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    update(input: CategoryUpdateDto): Observable<CategoryOutputDto> {
        let url_ = this.baseUrl + "/api/Category/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CategoryOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CategoryOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CategoryOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CategoryOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryOutputDto>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Category/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class GovernmentPublicationsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<GovtPublicationOutputDto[]> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<GovtPublicationOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovtPublicationOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GovtPublicationOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(GovtPublicationOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovtPublicationOutputDto[]>(<any>null);
    }

    getRare(): Observable<GovtPublicationOutputDto[]> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/GetRare";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRare(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRare(<any>response_);
                } catch (e) {
                    return <Observable<GovtPublicationOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovtPublicationOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRare(response: HttpResponseBase): Observable<GovtPublicationOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(GovtPublicationOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovtPublicationOutputDto[]>(<any>null);
    }

    getById(id: number): Observable<GovtPublicationOutputDto> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<GovtPublicationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovtPublicationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<GovtPublicationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GovtPublicationOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovtPublicationOutputDto>(<any>null);
    }

    create(input: GovtPublicationInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    update(input: GovtPublicationUpdateDto): Observable<GovtPublicationOutputDto> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<GovtPublicationOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GovtPublicationOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<GovtPublicationOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GovtPublicationOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GovtPublicationOutputDto>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/GovernmentPublications/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class NewsPapersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<NewspaperOutputDto[]> {
        let url_ = this.baseUrl + "/api/NewsPapers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<NewspaperOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<NewspaperOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<NewspaperOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(NewspaperOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NewspaperOutputDto[]>(<any>null);
    }

    getRare(): Observable<NewspaperOutputDto[]> {
        let url_ = this.baseUrl + "/api/NewsPapers/GetRare";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRare(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRare(<any>response_);
                } catch (e) {
                    return <Observable<NewspaperOutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<NewspaperOutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRare(response: HttpResponseBase): Observable<NewspaperOutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(NewspaperOutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NewspaperOutputDto[]>(<any>null);
    }

    getById(id: number): Observable<NewspaperOutputDto> {
        let url_ = this.baseUrl + "/api/NewsPapers/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<NewspaperOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NewspaperOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<NewspaperOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NewspaperOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NewspaperOutputDto>(<any>null);
    }

    create(input: NewspaperInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/NewsPapers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    update(input: NewspaperUpdateDto): Observable<NewspaperOutputDto> {
        let url_ = this.baseUrl + "/api/NewsPapers/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<NewspaperOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NewspaperOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<NewspaperOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NewspaperOutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NewspaperOutputDto>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/NewsPapers/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class OlaLeafsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
    }

    getAll(): Observable<OlaleafoutputDto[]> {
        let url_ = this.baseUrl + "/api/OlaLeafs/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<OlaleafoutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OlaleafoutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<OlaleafoutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OlaleafoutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OlaleafoutputDto[]>(<any>null);
    }

    getRare(): Observable<OlaleafoutputDto[]> {
        let url_ = this.baseUrl + "/api/OlaLeafs/GetRare";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRare(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRare(<any>response_);
                } catch (e) {
                    return <Observable<OlaleafoutputDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<OlaleafoutputDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRare(response: HttpResponseBase): Observable<OlaleafoutputDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(OlaleafoutputDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OlaleafoutputDto[]>(<any>null);
    }

    getById(id: number): Observable<OlaleafoutputDto> {
        let url_ = this.baseUrl + "/api/OlaLeafs/GetById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<OlaleafoutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OlaleafoutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<OlaleafoutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OlaleafoutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OlaleafoutputDto>(<any>null);
    }

    create(input: OlaLeafInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/OlaLeafs/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    update(input: OlaleafUpdateDto): Observable<OlaleafoutputDto> {
        let url_ = this.baseUrl + "/api/OlaLeafs/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<OlaleafoutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OlaleafoutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<OlaleafoutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OlaleafoutputDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OlaleafoutputDto>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/OlaLeafs/Delete?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class UserRegisterInputDto implements IUserRegisterInputDto {
    userName: string;
    emailAddress: string;
    password: string;
    nationalId: string;

    constructor(data?: IUserRegisterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.nationalId = data["nationalId"];
        }
    }

    static fromJS(data: any): UserRegisterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["nationalId"] = this.nationalId;
        return data; 
    }

    clone(): UserRegisterInputDto {
        const json = this.toJSON();
        let result = new UserRegisterInputDto();
        result.init(json);
        return result;
    }
}

export interface IUserRegisterInputDto {
    userName: string;
    emailAddress: string;
    password: string;
    nationalId: string;
}

export class UnRegUserOutputDto implements IUnRegUserOutputDto {
    id: string;
    userName: string;
    email: string;
    isActive: boolean;

    constructor(data?: IUnRegUserOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.email = data["email"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UnRegUserOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnRegUserOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): UnRegUserOutputDto {
        const json = this.toJSON();
        let result = new UnRegUserOutputDto();
        result.init(json);
        return result;
    }
}

export interface IUnRegUserOutputDto {
    id: string;
    userName: string;
    email: string;
    isActive: boolean;
}

export class AddForiegnerInputDto implements IAddForiegnerInputDto {
    id: string;

    constructor(data?: IAddForiegnerInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AddForiegnerInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddForiegnerInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): AddForiegnerInputDto {
        const json = this.toJSON();
        let result = new AddForiegnerInputDto();
        result.init(json);
        return result;
    }
}

export interface IAddForiegnerInputDto {
    id: string;
}

export class AuthorOutputDto implements IAuthorOutputDto {
    id: number;
    displayName: string;
    age: number;
    emailAddress: string;

    constructor(data?: IAuthorOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): AuthorOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data; 
    }

    clone(): AuthorOutputDto {
        const json = this.toJSON();
        let result = new AuthorOutputDto();
        result.init(json);
        return result;
    }
}

export interface IAuthorOutputDto {
    id: number;
    displayName: string;
    age: number;
    emailAddress: string;
}

export class AuthorInputDto implements IAuthorInputDto {
    displayName: string;
    age: number;
    emailAddress: string;

    constructor(data?: IAuthorInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): AuthorInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data; 
    }

    clone(): AuthorInputDto {
        const json = this.toJSON();
        let result = new AuthorInputDto();
        result.init(json);
        return result;
    }
}

export interface IAuthorInputDto {
    displayName: string;
    age: number;
    emailAddress: string;
}

export class AuthorUpdateDto implements IAuthorUpdateDto {
    id: number;
    displayName: string;
    age: number;
    emailAddress: string;

    constructor(data?: IAuthorUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): AuthorUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        return data; 
    }

    clone(): AuthorUpdateDto {
        const json = this.toJSON();
        let result = new AuthorUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IAuthorUpdateDto {
    id: number;
    displayName: string;
    age: number;
    emailAddress: string;
}

export class BookOutputDto implements IBookOutputDto {
    id: number;
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;

    constructor(data?: IBookOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BookOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }

    clone(): BookOutputDto {
        const json = this.toJSON();
        let result = new BookOutputDto();
        result.init(json);
        return result;
    }
}

export interface IBookOutputDto {
    id: number;
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;
}

export enum SourceType {
    Available = 10, 
    Rare = 20, 
}

export class CategoryOutputDto implements ICategoryOutputDto {
    id: number;
    displayName: string;

    constructor(data?: ICategoryOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CategoryOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }

    clone(): CategoryOutputDto {
        const json = this.toJSON();
        let result = new CategoryOutputDto();
        result.init(json);
        return result;
    }
}

export interface ICategoryOutputDto {
    id: number;
    displayName: string;
}

export class BookInputDto implements IBookInputDto {
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: IBookInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): BookInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): BookInputDto {
        const json = this.toJSON();
        let result = new BookInputDto();
        result.init(json);
        return result;
    }
}

export interface IBookInputDto {
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class BookUpdateDto implements IBookUpdateDto {
    id: number;
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: Author;
    category: Category;

    constructor(data?: IBookUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BookUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }

    clone(): BookUpdateDto {
        const json = this.toJSON();
        let result = new BookUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IBookUpdateDto {
    id: number;
    isbnNumber: string;
    totalPages: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: Author;
    category: Category;
}

export abstract class AuditedEntity implements IAuditedEntity {
    id: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletedTime: Date;
    creatorUserId: number;
    creationTime: Date;
    lastModificationDate: Date;
    lastModifierUser: number;

    constructor(data?: IAuditedEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.isDeleted = false;
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : false;
            this.deleterUserId = data["deleterUserId"];
            this.deletedTime = data["deletedTime"] ? new Date(data["deletedTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>undefined;
            this.lastModificationDate = data["lastModificationDate"] ? new Date(data["lastModificationDate"].toString()) : <any>undefined;
            this.lastModifierUser = data["lastModifierUser"];
        }
    }

    static fromJS(data: any): AuditedEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditedEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletedTime"] = this.deletedTime ? this.deletedTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModificationDate"] = this.lastModificationDate ? this.lastModificationDate.toISOString() : <any>undefined;
        data["lastModifierUser"] = this.lastModifierUser;
        return data; 
    }

    clone(): AuditedEntity {
        throw new Error("The abstract class 'AuditedEntity' cannot be instantiated.");
    }
}

export interface IAuditedEntity {
    id: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletedTime: Date;
    creatorUserId: number;
    creationTime: Date;
    lastModificationDate: Date;
    lastModifierUser: number;
}

export class Author extends AuditedEntity implements IAuthor {
    displayName: string;
    age: number;
    emailAddress: string;
    books: Book[];

    constructor(data?: IAuthor) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.displayName = data["displayName"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
            if (data["books"] && data["books"].constructor === Array) {
                this.books = [] as any;
                for (let item of data["books"])
                    this.books.push(Book.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Author {
        data = typeof data === 'object' ? data : {};
        let result = new Author();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        if (this.books && this.books.constructor === Array) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }

    clone(): Author {
        const json = this.toJSON();
        let result = new Author();
        result.init(json);
        return result;
    }
}

export interface IAuthor extends IAuditedEntity {
    displayName: string;
    age: number;
    emailAddress: string;
    books: Book[];
}

export abstract class SourceEntity extends AuditedEntity implements ISourceEntity {
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
    author: Author;
    category: Category;

    constructor(data?: ISourceEntity) {
        super(data);
        if (!data) {
            this.sourceType = SourceType.Available;
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"] !== undefined ? data["sourceType"] : SourceType.Available;
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
            this.author = data["author"] ? Author.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SourceEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'SourceEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }

    clone(): SourceEntity {
        throw new Error("The abstract class 'SourceEntity' cannot be instantiated.");
    }
}

export interface ISourceEntity extends IAuditedEntity {
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
    author: Author;
    category: Category;
}

export class Book extends SourceEntity implements IBook {
    isbnNumber: string;
    totalPages: number;

    constructor(data?: IBook) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isbnNumber = data["isbnNumber"];
            this.totalPages = data["totalPages"];
        }
    }

    static fromJS(data: any): Book {
        data = typeof data === 'object' ? data : {};
        let result = new Book();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isbnNumber"] = this.isbnNumber;
        data["totalPages"] = this.totalPages;
        super.toJSON(data);
        return data; 
    }

    clone(): Book {
        const json = this.toJSON();
        let result = new Book();
        result.init(json);
        return result;
    }
}

export interface IBook extends ISourceEntity {
    isbnNumber: string;
    totalPages: number;
}

export class Category extends AuditedEntity implements ICategory {
    displayName: string;
    books: Book[];

    constructor(data?: ICategory) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.displayName = data["displayName"];
            if (data["books"] && data["books"].constructor === Array) {
                this.books = [] as any;
                for (let item of data["books"])
                    this.books.push(Book.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        if (this.books && this.books.constructor === Array) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }

    clone(): Category {
        const json = this.toJSON();
        let result = new Category();
        result.init(json);
        return result;
    }
}

export interface ICategory extends IAuditedEntity {
    displayName: string;
    books: Book[];
}

export class CategoryInputDto implements ICategoryInputDto {
    displayName: string;

    constructor(data?: ICategoryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CategoryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        return data; 
    }

    clone(): CategoryInputDto {
        const json = this.toJSON();
        let result = new CategoryInputDto();
        result.init(json);
        return result;
    }
}

export interface ICategoryInputDto {
    displayName: string;
}

export class CategoryUpdateDto implements ICategoryUpdateDto {
    id: number;
    displayName: string;

    constructor(data?: ICategoryUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CategoryUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }

    clone(): CategoryUpdateDto {
        const json = this.toJSON();
        let result = new CategoryUpdateDto();
        result.init(json);
        return result;
    }
}

export interface ICategoryUpdateDto {
    id: number;
    displayName: string;
}

export class GovtPublicationOutputDto implements IGovtPublicationOutputDto {
    id: number;
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;

    constructor(data?: IGovtPublicationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GovtPublicationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GovtPublicationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GovtPublicationOutputDto {
        const json = this.toJSON();
        let result = new GovtPublicationOutputDto();
        result.init(json);
        return result;
    }
}

export interface IGovtPublicationOutputDto {
    id: number;
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;
}

export class GovtPublicationInputDto implements IGovtPublicationInputDto {
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: IGovtPublicationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): GovtPublicationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GovtPublicationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): GovtPublicationInputDto {
        const json = this.toJSON();
        let result = new GovtPublicationInputDto();
        result.init(json);
        return result;
    }
}

export interface IGovtPublicationInputDto {
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class GovtPublicationUpdateDto implements IGovtPublicationUpdateDto {
    id: number;
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: IGovtPublicationUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.totalPages = data["totalPages"];
            this.sector = data["sector"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): GovtPublicationUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new GovtPublicationUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["totalPages"] = this.totalPages;
        data["sector"] = this.sector;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): GovtPublicationUpdateDto {
        const json = this.toJSON();
        let result = new GovtPublicationUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IGovtPublicationUpdateDto {
    id: number;
    totalPages: number;
    sector: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class NewspaperOutputDto implements INewspaperOutputDto {
    id: number;
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;

    constructor(data?: INewspaperOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : <any>undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NewspaperOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new NewspaperOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : <any>undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }

    clone(): NewspaperOutputDto {
        const json = this.toJSON();
        let result = new NewspaperOutputDto();
        result.init(json);
        return result;
    }
}

export interface INewspaperOutputDto {
    id: number;
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;
}

export class NewspaperInputDto implements INewspaperInputDto {
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: INewspaperInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : <any>undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): NewspaperInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new NewspaperInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : <any>undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): NewspaperInputDto {
        const json = this.toJSON();
        let result = new NewspaperInputDto();
        result.init(json);
        return result;
    }
}

export interface INewspaperInputDto {
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class NewspaperUpdateDto implements INewspaperUpdateDto {
    id: number;
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: INewspaperUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.publicationDate = data["publicationDate"] ? new Date(data["publicationDate"].toString()) : <any>undefined;
            this.totalSubParts = data["totalSubParts"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): NewspaperUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new NewspaperUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["publicationDate"] = this.publicationDate ? this.publicationDate.toISOString() : <any>undefined;
        data["totalSubParts"] = this.totalSubParts;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): NewspaperUpdateDto {
        const json = this.toJSON();
        let result = new NewspaperUpdateDto();
        result.init(json);
        return result;
    }
}

export interface INewspaperUpdateDto {
    id: number;
    publicationDate: Date;
    totalSubParts: number;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class OlaleafoutputDto implements IOlaleafoutputDto {
    id: number;
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;

    constructor(data?: IOlaleafoutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.author = data["author"] ? AuthorOutputDto.fromJS(data["author"]) : <any>undefined;
            this.category = data["category"] ? CategoryOutputDto.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OlaleafoutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OlaleafoutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }

    clone(): OlaleafoutputDto {
        const json = this.toJSON();
        let result = new OlaleafoutputDto();
        result.init(json);
        return result;
    }
}

export interface IOlaleafoutputDto {
    id: number;
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    author: AuthorOutputDto;
    category: CategoryOutputDto;
}

export class OlaLeafInputDto implements IOlaLeafInputDto {
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: IOlaLeafInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): OlaLeafInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OlaLeafInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): OlaLeafInputDto {
        const json = this.toJSON();
        let result = new OlaLeafInputDto();
        result.init(json);
        return result;
    }
}

export interface IOlaLeafInputDto {
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class OlaleafUpdateDto implements IOlaleafUpdateDto {
    id: number;
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;

    constructor(data?: IOlaleafUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.description = data["description"];
            this.displayName = data["displayName"];
            this.publisher = data["publisher"];
            this.year = data["year"] ? new Date(data["year"].toString()) : <any>undefined;
            this.price = data["price"];
            this.sourceType = data["sourceType"];
            this.authorId = data["authorId"];
            this.categoryId = data["categoryId"];
        }
    }

    static fromJS(data: any): OlaleafUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OlaleafUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["publisher"] = this.publisher;
        data["year"] = this.year ? this.year.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["sourceType"] = this.sourceType;
        data["authorId"] = this.authorId;
        data["categoryId"] = this.categoryId;
        return data; 
    }

    clone(): OlaleafUpdateDto {
        const json = this.toJSON();
        let result = new OlaleafUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IOlaleafUpdateDto {
    id: number;
    description: string;
    displayName: string;
    publisher: string;
    year: Date;
    price: number;
    sourceType: SourceType;
    authorId: number;
    categoryId: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}